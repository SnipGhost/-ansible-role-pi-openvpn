---
# Should be on dedicated CA host

- name: Create config directory for certs and keys
  file:
    path: "{{ openvpn_server_dir }}"
    state: directory
    mode: 0755

# [On all hosts]
- name: Check if Easy RSA directory exists
  stat:
    path: "{{ easyrsa_directory }}"
  register: easydir

# [On all hosts]
- name: Copy Easy RSA
  shell: cp -r /usr/share/easy-rsa "{{ easyrsa_directory }}"
  when: easydir.stat.exists == False

# [On all hosts]
- name: Copy Easy RSA vars file
  template:
    src: easyrsa_vars.j2
    dest: "{{ easyrsa_directory }}/vars"
    mode: 0640
    owner: root
    group: root

# [On dedicated CA node]
- name: Check if Easy RSA keys directory exists
  stat:
    path: "{{ easyrsa_directory }}/pki"
  register: easykeysdir

# [On dedicated CA node]
- name: Create public key infrastructure and root CA cert
  shell: |
    ./easyrsa init-pki && \
    dd if=/dev/urandom of=pki/.rnd bs=256 count=1 && \
    ./easyrsa build-ca nopass
  args:
    executable: /bin/bash
    chdir: "{{ easyrsa_directory }}"
  when: not easykeysdir.stat.exists
  register: easyrsaconfig

- name: Check request
  stat:
    path: "{{ easyrsa_directory }}/pki/private/{{ ansible_hostname }}.key"
  register: easyrsarequest

# With dedicated CA add:
# ./easyrsa init-pki
- name: Generate request
  shell: ./easyrsa gen-req {{ ansible_hostname }} nopass
  args:
    executable: /bin/bash
    chdir: "{{ easyrsa_directory }}"
  when: not easyrsarequest.stat.exists

- name: Copy server cert key to config
  copy:
    remote_src: yes
    src: "{{ easyrsa_directory }}/pki/private/{{ ansible_hostname }}.key"
    dest: "{{ openvpn_server_dir }}/{{ ansible_hostname }}.key"
    owner: root
    group: root
    mode: 0600

# [On dedicated CA node]
- name: Check signed server cert
  stat:
    path: "{{ easyrsa_directory }}/pki/issued/{{ ansible_hostname }}.crt"
  register: easyrsasigned

# [On dedicated CA node]
# With dedicated CA add:
# ./easyrsa import-req pki/reqs/{{ ansible_hostname }}.req {{ ansible_hostname }}
- name: Sign request and get server cert
  shell: ./easyrsa sign-req server {{ ansible_hostname }}
  args:
    executable: /bin/bash
    chdir: "{{ easyrsa_directory }}"
  when: not easyrsasigned.stat.exists

- name: Copy signed server cert and CA cert to config
  copy:
    remote_src: yes
    src: "{{ item }}"
    dest: "{{ openvpn_server_dir }}"
    owner: root
    group: root
    mode: 0600
  with_items:
    - "{{ easyrsa_directory }}/pki/issued/{{ ansible_hostname }}.crt"
    - "{{ easyrsa_directory }}/pki/ca.crt"

- name: Check HMAC sign
  stat:
    path: "{{ easyrsa_directory }}/pki/ta.key"
  register: easyrsahmac

- name: Create HMAC sign (may take a while)
  shell: openvpn --genkey --secret ta.key
  args:
    executable: /bin/bash
    chdir: "{{ easyrsa_directory }}/pki"
  when: not easyrsahmac.stat.exists

- name: Copy HMAC sign to config
  copy:
    remote_src: yes
    src: "{{ easyrsa_directory }}/pki/ta.key"
    dest: "{{ openvpn_server_dir }}"
    owner: root
    group: root
    mode: 0600

- name: Check Certificate Revocation List
  stat:
    path: "{{ easyrsa_directory }}/pki/crl.pem"
  register: easyrsacrl

# [On dedicated CA node]
- name: Generate a Certificate Revocation List
  shell: ./easyrsa gen-crl
  args:
    executable: /bin/bash
    chdir: "{{ easyrsa_directory }}"
  when: not easyrsacrl.stat.exists

- name: Copy CRL to config
  copy:
    remote_src: yes
    src: "{{ easyrsa_directory }}/pki/crl.pem"
    dest: "{{ openvpn_server_dir }}"
    owner: root
    group: root
    mode: 0600